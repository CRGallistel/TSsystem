% TSORDEREVENTS Re-orders event codes that have near-equal timestamps%   Sometimes events occur in very close proximity but because of%   innacuracies in timing measurement, they end up in incorrect order.%   This can create problems later when using matchcodes on this data. For%   example, suppose that when the mouse poked its head in a feeder hole,%   it created a PokeOn1 event, and when it removes its head, it creates a%   PokeOff1 event. Now suppose that there are also Feed1 events when the%   mouse gets fed there. If the feeding occurs immediately at the time of%   the PokeOn1, it is possible that the Feed1 event will have an earlier%   time stamp than the PokeOn1, or that they have the same time stamp, but%   appear in the tsdata as:%%   ...     ...%   1020    Feed1%   1020    PokeOn1%   ...     ...%   1030    PokeOff1%   ...     ...%%   This function will go through and reorder events according to the%   priority you give them, assuming that they have either exactly the same%   time stamp or a time stamp difference smaller than a limit which you%   provide. The result of reordering is also controlled by modeflags.%%   TSorderevents ( TSDATA , EVENTS , TIMEDIFF , MODEFLAG )%   %   Arguments, Mandatory:%       TSDATA  - Standard, 2 column time stamped data%       EVENTS  - A vector of event codes. Events with lower indices in%                 this array will end up with lower row indices in the%                 resulting TSdata.%%   Arguments, Optional:%       TIMEDIFF- A scalar representing the maximum timestamp difference%                 for which to reorder the events. Default = 0.%       MODEFLAG- A string containing modeflags which alter behavoir of the%                 function.%%   Either timediff or modeflag may be excluded.%%   Modeflags available:%       's' - If 2 codes are swapped as a result of priority reordering,%             they swap timestamps. In this mode, the timestamp column of%             the TSdata is left alone. This is the default mode.%%       'e' - If 2 codes are reordered, then both are considered to have%             occurred at the earlier timestamp.%%       'l' - If 2 codes are reordered, then both are considered to have%             occurred at the later timestamp.%   %   See also, TSEDITfunction [ tsdata ] = TSorderevents(tsdata, events, timediff, modeflag)narg = nargin;if narg < 4    modeflag = '';        if narg < 3        timediff = 0;     elseif ischar(timediff)        modeflag = timediff;        timediff = 0;    endelseif ischar(timediff) && isnumeric(modeflag)    temp = timediff;    timediff = modeflag;    modeflag = temp;end    d = diff(tsdata(:,1)) <= timediffcheckcodes = find([d; false] | [false; d])rangestart = checkcodes(diff([-1; checkcodes]) ~= 1)rangelength = diff([rangestart; checkcodes(end)+1])rangeend = rangestart + rangelength - 1mode = 3;if any(modeflag == 'e')    mode = 1;elseif any(modeflag == 'l')    mode = 2;elseif any(modeflag == 's')    mode = 3;endswitch(mode)    case 1,        for r = 1:numel(rangestart)            range = tsdata(rangestart(r):rangeend(r),:);            [tf, loc] = ismember(range(:,2), events);            idx = loc(tf);            if ~isempty(idx) && ~issorted(idx)                ridx = 1:numel(tf);                ridx = ridx(tf)';                sortedidx = [ridx idx];                sortedidx = sortrows(sortedidx, 2);                range(ridx,:) = range(sortedidx(:,1),:);                if ~issorted(range(:,1))                    for x = size(range,1)-1:-1:1                        if range(x+1,1) < range(x,1)                            range(x,1) = range(x+1,1);                        end                    end                end                tsdata(rangestart(r):rangeend(r),:) = range;            end        end    case 2,        for r = 1:numel(rangestart)            range = tsdata(rangestart(r):rangeend(r),:);            [tf, loc] = ismember(range(:,2), events);            idx = loc(tf);            if ~issorted(idx)                ridx = 1:numel(tf);                ridx = ridx(tf)';                sortedidx = [ridx idx];                sortedidx = sortrows(sortedidx, 2);                range(ridx,:) = range(sortedidx(:,1),:);                if ~issorted(range(:,1))                    for x = 1:size(range,1)-1                        if range(x+1,1) < range(x,1)                            range(x+1,1) = range(x,1);                        end                    end                end                tsdata(rangestart(r):rangeend(r),:) = range;            end        end    case 3,        for r = 1:numel(rangestart)            range = tsdata(rangestart(r):rangeend(r),:)            [tf, loc] = ismember(range(:,2), events);            idx = loc(tf);            if ~issorted(idx)                ridx = 1:numel(tf);                ridx = ridx(tf)';                sortedidx = [ridx idx];                sortedidx = sortrows(sortedidx, 2);                range(ridx,2) = range(sortedidx(:,1),2);                tsdata(rangestart(r):rangeend(r),:) = range;            end        endendreturn