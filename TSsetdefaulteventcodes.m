function TSsetdefaulteventcodes ( filename )% TSSETDEFAULTEVENTCODES( filename )%   This function works essentially the same way as TSimporteventcodes%   except that the codes are saved to a Matlab preference setting specific%   to this computer. Whenever an Experiment is not currently loaded, these%   codes will be used instead. This is useful if you need to develop data%   analysis routines in the absence of an actual experiment structure with%   actual data.%%   Any file that will work for TSimporteventcodes will be legal for this%   function.%%   See also TSIMPORTEVENTCODESExperimentEmpty = evalin('base','isempty(who(''global'',''Experiment''))');if ~ExperimentEmpty    global Experiment;endif nargin < 1    if ExperimentEmpty || ~isfield(Experiment, 'EventCodes') || ~isstruct(Experiment.EventCodes);        %error('There is no Experiment structure defined');        q = questdlg('No experiment structure defined. What would you like to do?','TSsetdefaulteventcodes','Load event codes from File', 'Cancel','Load event codes from File');    else        q = questdlg('What would you like to do?','TSsetdefaulteventcodes','Load event codes from File', 'Load event codes from Experiment', 'Cancel','Load event codes from File');    end    if any(q == ' ')        q = q(find(q == ' ',1,'last'):end);    end        if q(1) == 'C'        return;    end        if q(1) == 'F'        % Call up a file window for replacement code list        [filename, pathname] = uigetfile('*.*', 'Find the Event Codes file');        filename = [pathname filename];    else        filename = [];    endendif ischar(filename)script = {};fid = fopen(filename);%script = fread(fid, inf, 'uchar');%script = char(script)';temp = fgetl(fid);while ischar(temp)    script{end+1} = temp;    temp = fgetl(fid);endfclose(fid);% Script is now a cell string containing the whole file. We will execute% one line at a time until all are executed, and each time we add any new% variables that have been created to the out struct. Any variables that% get deleted we remove from the out struct. This ensures that codes are% created in the out struct in the same order they are added or removed. out = struct;names = {};oldnames = {};i = 1;j = 1;for i = 1:numel(script);    oldnames = who;    eval(script{i});    names = who;        temp = setdiff(names, oldnames);    if ~isempty(temp)        for j = 1:numel(temp)            out.(temp{j}) = eval(temp{j});        end    end        temp = setdiff(oldnames, names);    if ~isempty(temp)        out = rmfield(out, temp);    endendelse     %Else the filename is not a character, so the user must have selected    %to load codes from Experiment.     out = Experiment.EventCodes;endsetpref('TSLib','DefaultEventCodes', out);clear;TSdeclareeventcodes;